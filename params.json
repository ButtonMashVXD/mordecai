{
  "name": "Mordecai",
  "tagline": "Custom-built full text and event geoparsing",
  "body": "[![Circle CI](https://circleci.com/gh/caerusassociates/mordecai.svg?style=svg)](https://circleci.com/gh/caerusassociates/mordecai)\r\n\r\nmordecai\r\n=========\r\n\r\nCustom-built full text geoparsing. Extract all the place names from a piece of\r\ntext, resolve them to the correct place, and return their coordinates and\r\nstructured geographic information.\r\n\r\nThis software was donated to the Open Event Data Alliance by Caerus Associates.\r\nSee [Releases](https://github.com/openeventdata/mordecai/releases) for the\r\n2015-2016 production version of Mordecai.\r\n\r\nWhy Mordecai?\r\n------------\r\n\r\nMordecai was developed to address several specific needs that previous text\r\ngeoparsing software did not. These specific requirements include:\r\n\r\n- Overcoming a strong preference for US locations in existing geoparsing\r\n  software. Mordecai makes determining the country focus of the text should\r\n  be a separate and accurate step in the geoparsing process.\r\n- Ease of setup and use. The system should be installable and usable by people\r\n  with only basic programming skills. Mordecai does this by running as a Docker\r\n  + REST service, hiding the complexity of installation from end users.\r\n- Drop-in replacement for [CLIFF](http://cliff.mediameter.org/)/\r\n[CLAVIN](https://clavin.bericotechnologies.com/) in the [Open Event Data\r\nAlliance](https://github.com/openeventdata) event data pipeline.\r\n- Ease of modification. This software was developed to be used primarily by\r\n  social science researchers, who tend to be much more familiar with Python\r\n  than Java. Mordecai makes the key steps in the geoparsing process (named entity\r\n  extraction, place name resolution, gazetteer lookup) exposed and easily\r\n  changed.\r\n- Language-agnostic architecture. The only language-specific components of\r\n  Mordecai are the named entity extraction model and the word2vec model. Both\r\n  of these can be easily swapped out, giving researchers the ability to\r\n  geoparse non-English text, which is a capability that has not existed in open\r\n  source software until now.\r\n\r\nHow does it work?\r\n-----------------\r\n\r\n`Mordecai` accepts text and returns structured geographic information extracted\r\nfrom it. It does this in several ways:\r\n\r\n- It uses [MITIE](https://github.com/mit-nlp/MITIE) named entity recognition to\r\n  extract placenames from the text. In the default configuration, it uses the\r\n  out-of-the-box MITIE models, but these can be changed out for custom models\r\n  when needed.\r\n\r\n- It uses [word2vec](https://code.google.com/p/word2vec/)'s models, with\r\n  [gensim](https://radimrehurek.com/gensim/)'s Python implementation, to infer\r\n  the country focus of an article given the word vectors of the article's\r\n  placenames.  The word2vec vectors of all the place names extracted from the\r\n  text are averaged, and this average vector is compared to the vectors for all\r\n  country names. The closest country is used as the focus country of the piece of\r\n  text.\r\n\r\n- It uses a country-filtered search of the [geonames](http://www.geonames.org/)\r\n  gazetteer in [Elasticsearch](https://www.elastic.co/products/elasticsearch)\r\n  (with some custom logic) to find the latitude and longitude for each place\r\n  mentioned in the text.\r\n\r\nIt runs as a Flask-RESTful service inside a Docker container.\r\n\r\nSimple Docker Installation\r\n------------\r\n\r\nMordecai is built as a series of [Docker](https://www.docker.com/) containers,\r\nwhich means that you won't need to install any software except Docker to use\r\nit. You can find instructions for installing Docker on your operating system\r\n[here](https://docs.docker.com/engine/installation/).\r\n\r\nFirst download models to wherever you like (for this example\r\n`./data`):\r\n\r\n```\r\nbash data/fetch_models.sh\r\n```\r\n\r\nTo start Mordecai locally, run these three commands:\r\n\r\n```\r\nsudo docker run -d -p 9200:9200 --name=elastic openeventdata/es-geonames\r\nsudo docker build -t mordecai .\r\nsudo docker run -d -p 5000:5000 -v PATH/TO/data:/usr/src/data --link elastic:elastic mordecai \r\n```\r\n\r\n### Explanation:\r\n\r\nThe first code block downloads the pre-built word2vec and MITIE models that\r\nMordecai needs.\r\n\r\nIn the second block, the first line downloads (if you're running it for the\r\nfirst time) and starts a pre-built image of a Geonames Elasticsearch container.\r\nThis container holds the geographic gazetteer that Mordecai uses to associate\r\nplace names with latitudes and longitudes. It will be accessible on port 9200\r\nwith the name `elastic`.\r\n\r\nLine 2 builds the main Mordecai image using the commands in the `Dockerfile`.\r\nThis can take up to 20 minutes.\r\n\r\nLine 3 starts the Mordecai container and tells it to connect to our already\r\nrunning `elastic` container with the `--link elastic:elastic` option. Mordecai\r\nwill be accessible on port 5000. By default, Docker runs on 0.0.0.0, so any\r\nmachine on your network will be able to access it. It also maps the directory\r\ncontaining the word2vec and MITIE models to `/src/user/data`.\r\n \r\n**Note on resources**: Many of the required components for `mordecai`,\r\nincluding the word2vec and MITIE models, are very large so downloading and\r\nstarting the service takes a while. After starting the service, it will not be\r\nresponsive for several minutes as the models are loaded into memory. You should\r\nalso ensure that you have approximately 16 gigs of RAM available.\r\n\r\n\r\nAdvanced Configuration\r\n-----------------------\r\n\r\n`Mordecai`'s Geonames gazeteer can either be run locally alongside Mordecai or\r\non a remote server. Elasticsearch/Geonames requires a large amount of memory,\r\nso running it locally may be okay for small projects (if your machine has\r\nenough RAM), but is not recommended for production. \r\n\r\nIf you're running elasticsearch/geonames on a different server, you'll need to\r\nmake two change:\r\n\r\nFirst, the config file's default settings assume that `es-geonames` is running\r\nlocally. If you're running it on a separate server, uncomment and change the\r\n`Server` section of the config file and update with the IP and port of your\r\nrunning geonames/elasticsearch index.\r\n\r\nSecond, leave out the `--link elastic:elastic` portion when you call `docker\r\nrun` on Mordecai.\r\n\r\nIf you make any modifications to the Python files, you'll need to rebuild the\r\nMordecai container, which should only take a couple seconds, and then relaunch\r\nit.\r\n\r\n### Changing Mordecai options (Advanced)\r\n\r\nThe Mordecai Flask service runs with default values, but you can change them in\r\nthe Dockerfile or using environmental variables if you need it to use a\r\ndifferent port, host, etc. The options are described here:\r\n\r\n```\r\nusage: app.py [-h] [-c CONFIG_FILE] [-p PORT] [-eh ELASTICSEARCH_HOST]\r\n              [-ep ELASTICSEARCH_PORT] [-w W2V_MODEL] [-md MD] [-mn MITIE_NER]\r\n\r\nMordecai Geolocation\r\n\r\nOptions:\r\n  -h, --help            show this help message and exit\r\n  -c CONFIG_FILE, --config-file CONFIG_FILE\r\n                        Specify path to config file.\r\n  -p PORT, --port PORT  Specify port to listen on.\r\n  -eh ELASTICSEARCH_HOST, --elasticsearch-host ELASTICSEARCH_HOST\r\n                        Specify elasticsearch host.\r\n  -ep ELASTICSEARCH_PORT, --elasticsearch-port ELASTICSEARCH_PORT\r\n                        Specify elasticsearch port.\r\n  -w W2V_MODEL, --w2v-model W2V_MODEL\r\n                        Specify path to w2v model.\r\n  -md MD, -mitie-dir MD\r\n                        Specify MITIE directory.\r\n  -mn MITIE_NER, --mitie-ner MITIE_NER\r\n                        Specify path to MITIE NER model.\r\n```\r\n\r\n\r\nEndpoints\r\n---------\r\n\r\nEach of these endpoints will return example usage with a `GET` request.\r\n\r\n1. `/country`\r\n\r\n    In: text\r\n\r\n    Out: An ISO country code that best matches the country focus of the text (used as input to later searches). In the future, this will be a list of country codes.\r\n\r\n2. `/places`\r\n\r\n    In: text, country code\r\n\r\n    Out: list of dictionaries of placenames and lat/lon in text. The keys are \"lat\", \"lon\", \"placename\", \"searchterm\", \"admin1\", and \"countrycode\". \r\n\r\n\r\n4. `/osc`\r\n\r\n    In: text\r\n\r\n    Out: placenames and lat/lon, customized for OSC stories\r\n\r\nExample usage\r\n-------------\r\n\r\nThe primary intended use for Mordecai is to geocode events produced by the\r\n[Open Event Data Alliance](https://github.com/openeventdata) set of event\r\ncoding tools. These tools extract and structure descriptions of political\r\nevents from news text. The main\r\n[pipeline](https://github.com/openeventdata/phoenix_pipeline) takes in text\r\ndocuments and [their CoreNLP\r\nparses](https://github.com/openeventdata/stanford_pipeline), extracts events\r\nfrom them using [Petrarch2](https://github.com/openeventdata/petrarch2),\r\ngeolocates them (using Mordecai), and does some\r\n[postprocessing](https://github.com/openeventdata/phoenix_pipeline).\r\n\r\nThe code integrating Mordecai into the pipeline can be seen\r\n[here](https://github.com/openeventdata/phoenix_pipeline/blob/master/geolocation.py)\r\nand is a useful starting point for integrating Mordecai into other production\r\npipelines. The examples below demonstrate more basic useage in bash/curl,\r\nand R, and Python.\r\n\r\n\r\n### Curl\r\n\r\n```\r\ncurl -XPOST -H \"Content-Type: application/json\"  --data '{\"text\":\"(Reuters) - The Iraqi government claimed victory over Islamic State insurgents in Tikrit on Wednesday after a month-long battle for the city supported by Shiite militiamen and U.S.-led air strikes, saying that only small pockets of resistance remained. State television showed Prime Minister Haidar al-Abadi, accompanied by leaders of the army and police, the provincial governor and Shiite paramilitary leaders, parading through Tikrit and raising an Iraqi flag. The militants captured the city, about 140 km (90 miles) north of Baghdad, last June as they swept through most of Iraqs Sunni Muslim territories, swatting aside a demoralized and disorganized army that has now required an uneasy combination of Iranian and American support to get back on its feet.\"}' 'http://localhost:5000/places'\r\n```\r\n\r\nOr if you know this text is about Iraq:\r\n\r\n```\r\ncurl -XPOST -H \"Content-Type: application/json\"  --data '{\"text\":\"(Reuters) - The Iraqi government claimed victory over Islamic State insurgents in Tikrit on Wednesday after a month-long battle for the city supported by Shiite militiamen and U.S.-led air strikes, saying that only small pockets of resistance remained. State television showed Prime Minister Haidar al-Abadi, accompanied by leaders of the army and police, the provincial governor and Shiite paramilitary leaders, parading through Tikrit and raising an Iraqi flag. The militants captured the city, about 140 km (90 miles) north of Baghdad, last June as they swept through most of Iraqs Sunni Muslim territories, swatting aside a demoralized and disorganized army that has now required an uneasy combination of Iranian and American support to get back on its feet.\", \"country\": \"IRQ\"}' 'http://localhost:5000/places'\r\n```\r\n\r\nReturns:\r\n`[{\"lat\": 34.61581, \"placename\": \"Tikrit\", \"seachterm\": \"Tikrit\", \"lon\": 43.67861, \"countrycode\": \"IRQ\"}, {\"lat\": 34.61581, \"placename\": \"Tikrit\", \"seachterm\": \"Tikrit\", \"lon\": 43.67861, \"countrycode\": \"IRQ\"}, {\"lat\": 33.32475, \"placename\": \"Baghdad\", \"seachterm\": \"Baghdad\", \"lon\": 44.42129, \"countrycode\": \"IRQ\"}]`\r\n\r\n### R\r\n\r\nSee the `examples` directory for an example in R, demonstrating how in read in\r\ntext, send it to Mordecai, format the returned JSON, and plot it on an\r\ninteractive map.\r\n\r\n### Python\r\n\r\n```\r\nimport json\r\nimport requests\r\n\r\nheaders = {'Content-Type': 'application/json'}\r\ndata = {'text': \"\"\"(Reuters) - The Iraqi government claimed victory over Islamic State insurgents in Tikrit on Wednesday after a month-long battle for the city supported by Shiite militiamen and U.S.-led air strikes, saying that only small pockets of resistance remained. State television showed Prime Minister Haidar al-Abadi, accompanied by leaders of the army and police, the provincial governor and Shiite paramilitary leaders, parading through Tikrit and raising an Iraqi flag. The militants captured the city, about 140 km (90 miles) north of Baghdad, last June as they swept through most of Iraqs Sunni Muslim territories, swatting aside a demoralized and disorganized army that has now required an uneasy combination of Iranian and American support to get back on its feet.\"\"\"}\r\ndata = json.dumps(data)\r\nout = requests.post('http://localhost:5000/places', data=data, headers=headers)\r\n```\r\n\r\nCustomization\r\n------------\r\n\r\nMordecai is meant to be easy to customize. There are a few ways to do this.\r\n\r\n1. Change the MITIE named entity recognition model. This is a matter of changing one line in the configuration file, assuming that the custom trained MITIE model returns entities tagged as \"LOCATION\".\r\n\r\n2. Custom place-picking logic. See the `/osc` for an example. Prior knowledge about the place text is about and the vocabulary used in the text to describe place times can be hard coded into a special endpoint for a particular corpus.\r\n\r\n3. If a corpus is known to be about a specific country, that country can be passed to `places` to limit the search to places in that country.\r\n\r\nTests\r\n-----\r\n\r\n`mordecai` currently includes a few unit tests. To run the tests:\r\n\r\n```\r\ncd resources\r\npy.test\r\n```\r\n\r\nThe tests currently require access to a running Elastic/Geonames service to\r\ncomplete. If this service is running locally in a Docker container, uncomment\r\nthe `Server` section in the config file so host = `localhost` and port =\r\n`9200`.\r\n\r\nContributing\r\n------------\r\n\r\nContributions via pull requests are welcome. Please make sure that changes\r\npass the unit tests. Any bugs and problems can be reported\r\non the repo's [issues page](https://github.com/openeventdata/mordecai/issues).\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}